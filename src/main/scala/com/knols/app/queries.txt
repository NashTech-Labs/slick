// create table 
    val ddl= Employees.ddl ++ Projects.ddl ++ EmpProjects.ddl
    ddl.create
    
 // drop table
     val ddl= Employees.ddl ++ Projects.ddl ++ EmpProjects.ddl
     ddl.drop
     
 //    insert single row 
Employees.insert(Emp(8, "satendra kumar", "satendra@knoldus.com", "consultant", java.sql.Date.valueOf("2013-06-3")) )
  
  // insert list of row
  
    val listOfEmp = List(Emp(1, "Janmejani", "Janmejani@knoldus.com", "consultant", java.sql.Date.valueOf("2012-11-26")),
      Emp(2, "Anand", "anand@knoldus.com", "consultant", java.sql.Date.valueOf("2013-07-01")),
      Emp(3, "Rishi Khandelwal ", "rishi@knoldus.com", "consultant", java.sql.Date.valueOf("2012-08-29")),
      Emp(4, "Neelkanth Sachdeva", "neel@knoldus.com", "seniorconsultant", java.sql.Date.valueOf("2011-07-04")),
      Emp(5, "piyush", "piyush@knoldus.com", "consultant", java.sql.Date.valueOf("2012-05-07")),
      Emp(6, "sanjeev", "sanjeev@knoldus.com", "consultant", java.sql.Date.valueOf("2013-07-10")),
      Emp(7, "Mayank Bairagi", "mayank@knoldus.com", "seniorconsultant", java.sql.Date.valueOf("2012-07-31")),
      Emp(8, "satendra kumar", "satendra@knoldus.com", "consultant", java.sql.Date.valueOf("2013-06-3")))

    Employees.insertAll(listOfEmp: _*)
    
    val listofProject = List(
    Project(1001, "decooda", "US"),
    Project(1002, "recommendo", "Germany"),
    Project(1003, "BeanStream", "US"),
    Project(1004, "tutorme", "UK"),
    Project(1005, "scalageek", "india"),
    Project(1006, "newsfeed", "india"),
    Project(1007, "datacube", "US"))
    
    Projects.insertAll(listofProject:_*)
    
   val listOfEmpProject = List(
      EmpProject(1, 1006),
      EmpProject(2, 1001),
      EmpProject(3, 1004),
      EmpProject(4, 1004),
      EmpProject(4, 1003),
      EmpProject(5, 1007),
      EmpProject(6, 1005),
      EmpProject(6, 1002),
      EmpProject(7, 1001),
      EmpProject(8, 1001))
      
    EmpProjects.insertAll(listOfEmpProject: _*)
    
    // retrive row
    Retrieve all rows:
		Query(Employees).list
		or
		(for(emp <-Employees)yield(emp)).list
	Retrieve all rows with only two columns(name and joning date):
		( for(emp <-Employees) yield (emp.name, emp.doj) ).list
		or
		(Employees map {emp =>( emp.name,emp.doj)}).list
		
 //Update name of employee (where employee id is 8):
 	val query = for (emp <- Employees if emp.id === 8) yield (emp.name)
    query.update("satendra")
// Delete employee (where employee id is 8 ):
   val query = for (emp <- Employees if emp.id === 8) yield (emp)
    query.delete
//Delete all employee:
 val query = for (emp <- Employees) yield (emp)
    query.delete
  
  
  // sorting
  Sort employee list by id:
(for (emp <- Employees) yield (emp)).sortBy(emp => emp.id).list
reverse sorting
(for (emp <- Employees) yield (emp)).sortBy(emp => emp.id.desc).list

Sort employee list by  joining date:
(for (emp <- Employees) yield (emp)).sortBy(emp => emp.id).list

// filter

	Filter employees which have joining date between 2013-07-10 and 2012-11-2:
	Employees.filter{emp => (emp.doj <= Date.valueOf("2013-07-10") &&emp.doj >= Date.valueOf("2012-11-26")) }.list  
	
	//join 
	
	 val query = (for {
      emp <- Employees
      empproject <- EmpProjects if emp.id === empproject.empId
      project <- Projects if (empproject.projectId === project.id)
    } yield (emp.name, project.name)).list
    
    //union
    
     val query1 = Employees.filter { emp => emp.id === 8  }
    val query2 = Employees.filter { emp => emp.id ===2}
     (query1 union query2).list
    
 		
    
    